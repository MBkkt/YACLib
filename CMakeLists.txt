cmake_minimum_required(VERSION 3.11)

# Include guards
if (PROJECT_SOURCE_DIR STREQUAL PROJECT_BINARY_DIR)
  message(FATAL_ERROR "In-source builds not allowed. Please make a new directory (called a build directory) and run CMake from there.")
endif ()

project(yaclib)

# Set variables
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_VISIBILITY_PRESET hidden)

set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)
set(CMAKE_C_VISIBILITY_PRESET hidden)

set(CMAKE_VISIBILITY_INLINES_HIDDEN ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
if (ENABLE_LTO)
  set(CMAKE_INTERPROCEDURAL_OPTIMIZATION ON)
else ()
  set(CMAKE_INTERPROCEDURAL_OPTIMIZATION OFF)
endif ()

if (MSVC)
  list(APPEND YACLIB_COMPILE_OPTIONS /Wall)
  if (SANITIZER)
    message("Sanitizer's work only on Linux")
  endif ()
else ()
  list(APPEND YACLIB_COMPILE_OPTIONS -Wall -Wextra -pedantic)
  if (SANITIZER STREQUAL ASAN)
    set(SANITIZE -fsanitize=address)
  elseif (SANITIZER STREQUAL TSAN)
    set(SANITIZE -fsanitize=thread)
  elseif (SANITIZER STREQUAL UBSAN)
    set(SANITIZE -fsanitize=undefined)
  elseif (SANITIZER STREQUAL MEMSAN) # Memory Santizer doesn't work with GTest (https://github.com/google/sanitizers/issues/648)
    set(SANITIZE -fsanitize=memory)
  endif ()
  list(APPEND YACLIB_COMPILE_OPTIONS ${SANITIZE})
  list(APPEND YACLIB_LINK_OPTIONS ${SANITIZE})
endif ()
message("Build options: ${YACLIB_COMPILE_OPTIONS}")
message("Link  options: ${YACLIB_LINK_OPTIONS}")

include(FetchContent)

# Create static library
add_subdirectory(src)

if (BUILD_TESTING)
  enable_testing()
  add_subdirectory(test)
endif ()
